package com.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.model.Utilisateur;
import com.repository.CoursRepository;
import com.repository.EnfantRepository;
import com.repository.MatiereRepository;
import com.repository.NiveauRepository;
import com.repository.ParentRepository;
import com.repository.QuestionRepository;
import com.repository.ReponsesRepository;
import com.repository.TestRepository;
import com.repository.UserRepository;
import com.repository.test_resultatRepository;
import com.service.UserService;
import com.model.Cours;
import com.model.Enfant;
import com.model.FormAjCours;
import com.model.FormAjQuiz;
import com.model.Matiere;
import com.model.Niveau;
import com.model.Parent;
import com.model.Question;
import com.model.Reponses;
import com.model.Test;
import com.model.Test_resultat;

@Controller
public class LoginController {
	
	@Autowired
	private UserService userService;
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
private UserRepository userRepository;

	@Autowired
private EnfantRepository enfRepository;

	@Autowired
	private NiveauRepository nivRepository;
 
	@Autowired
	private CoursRepository coursRepository;

	@Autowired
	private MatiereRepository matiereRepository;

	@Autowired
	private QuestionRepository questionRepository;

	@Autowired
	private TestRepository testRepository;

	@Autowired
	private test_resultatRepository tesResRepository;
	
	@Autowired
	private ReponsesRepository repRepository;
	
	@Autowired
	private ParentRepository parentRepository;
	
	@RequestMapping(value="/registration", method = RequestMethod.GET)
	public ModelAndView registration(){
		ModelAndView modelAndView = new ModelAndView();
		Utilisateur user = new Utilisateur();
		modelAndView.addObject("user", user);
		modelAndView.setViewName("registration");
		return modelAndView;
	}
	
	
	@RequestMapping(value= {"/","/AccueilParent"}, method = RequestMethod.GET)
	public String home(ModelMap model) throws ParseException{
		
		
		SimpleDateFormat formater = new SimpleDateFormat("yy-MM-dd");		
    
	    
		return "AccueilParent" ;
	}
	
	
	@RequestMapping(value={"/matieres"}, method = RequestMethod.GET)
	public String matieres(ModelMap model){
		
		List<Enfant> enfantino = (List<Enfant>) enfRepository.findByParentIDEnfant(2);
		List<Matiere> mats = (List<Matiere>)  matiereRepository.findByNiveauIdMatiere(enfantino.get(0).getNiveauScolaire().getNiveauId()) ;		
		model.addAttribute("MatiereSpecif",mats);
		return "matieres";
	}
	
	
	
	//**************************************************************************************
	
	@RequestMapping(value={"/etatcompte"}, method = RequestMethod.GET)
	public String Etatdecompte(ModelMap model){
		
		// id de l enfant
     	int nb_enf = enfRepository.findNombreEnfant(1) ;
		Parent par = parentRepository.findParent(2) ;
	//	System.out.println("haa"+par.getNom()+"jj"+par.getPrenom());
		model.addAttribute("parent",par);
		model.addAttribute("nb",nb_enf);		
		return "etatcompte";
	}
	
	@RequestMapping(value={"/Resultats"}, method = RequestMethod.GET)
	public String AffichRes(ModelMap model){
		
		// mets le id du parent                                                  iciiiii ParentID
		List<Enfant> enfantino = (List<Enfant>) enfRepository.findByParentIDEnfant(2);
		List<Test_resultat> testRes = (List<Test_resultat>)tesResRepository.findByEnfantIDResultat(enfantino.get(0).getID()) ;
    //    List<String> mat = new ArrayList() ;
	//	List<Integer> testids = (List<Integer> )tesResRepository.findByEnfantIDTestID(enfantino.get(0).getID()) ;

		List<String> str = new ArrayList() ;
		
		model.addAttribute("Resultats",testRes);


		return "Resultats";
	}
	
	//***********************************************************************************************
	
	@RequestMapping(value={"/AjCours"}, method = RequestMethod.GET)
	public String AjouterCours(ModelMap model){
        model.addAttribute("cours",new Cours()) ;
		return "AjCours";
	}
	
	@PostMapping("/AjCours")
    public String AjcoursSubmit(@Valid Cours cours, BindingResult bindingResult, Model model) {

		//System.out.println(mat.getTitre());
		coursRepository.save(cours);
		return "AjCours";
    }
	
	
	
	//********************************************************
	
	@RequestMapping(value={"/AjQuesCours"}, method = RequestMethod.GET)
	public String AjouterQuesCours(ModelMap model){
        model.addAttribute("lecours",new FormAjCours()) ;
        model.addAttribute("coursnom", coursRepository.findAll()) ;
		return "AjQuesCours";
	}
	
	@PostMapping("/AjQuesCours")
    public String AjQuescoursSubmit(@Valid FormAjCours qcours, BindingResult bindingResult, Model model) {
        model.addAttribute("lecours",new FormAjCours()) ;

		 Question quest = new Question(); 
	      quest.setContenu(qcours.getQuestion());
	      String repJuste = qcours.getChoix().get(Integer.parseInt(qcours.getBonneRep())) ;  
         
	        quest.setReponse(repJuste);
	        quest.setDeCours(true);
	        
	        List<Reponses> listR = new ArrayList() ;
	        
	        for(int i=0;i< qcours.getChoix().size();i++)
	        {
	        	Reponses reps = new Reponses();
	        	reps.setContenu(qcours.getChoix().get(i));
	            if(repJuste.equals(qcours.getChoix().get(i))){
	            	reps.setChoixJuste(true);
	            	listR.add(reps) ;
	            }else {
	            	reps.setChoixJuste(false);
	            	listR.add(reps) ;
	            }

	            reps.setQuestion(quest);
	            repRepository.save(reps);
	        }
			questionRepository.save(quest);
			
		
		
		
		return "AjQuesCours";
    }
	
	
	
	//****************************************
	
	@RequestMapping(value={"/AjQuizz"}, method = RequestMethod.GET)
	public String AjouterQuizz(ModelMap model){
       /// model.addAttribute("matiere",new Matiere()) ;
		   model.addAttribute("test",new Test()) ;
		   
		return "ajouterQuizz";
	}
	
	@PostMapping("/AjQuizz")
    public String AjQuizSubmit(@Valid Test test, BindingResult bindingResult, Model model) {
		
		testRepository.save(test);

		return "ajouterQuizz";
    }

	
	//****************************************

	
	@RequestMapping(value={"/AjQuestion"}, method = RequestMethod.GET)
	public String AjouterQuestion(ModelMap model){
		
		List<Test> tests = (List<Test>) testRepository.findAll();
        model.addAttribute("formq", new FormAjQuiz()) ;
	    model.addAttribute("quizname",tests) ;
		return "AjouterQuestion";
	}
	
	@PostMapping("/AjQuestion")
    public String AjQuestionSubmit(@Valid FormAjQuiz formq, BindingResult bindingResult, Model model) {
        model.addAttribute("formq",new FormAjQuiz()) ;
        
        Question quest = new Question(); 
        quest.setContenu(formq.getQuestion());
        String repJuste = formq.getChoix().get(Integer.parseInt(formq.getBonneRep())) ;
         
        quest.setReponse(repJuste);
        Test t = testRepository.findBytitreTest(formq.getNomQuiz()) ;        
        quest.setTest(t);
        quest.setDeCours(false);
        
        List<Reponses> listR = new ArrayList() ;
        
        for(int i=0;i< formq.getChoix().size();i++)
        {
        	Reponses reps = new Reponses();
        	reps.setContenu(formq.getChoix().get(i));
            if(repJuste.equals(formq.getChoix().get(i))){
            	reps.setChoixJuste(true);
            	listR.add(reps) ;
            }else {
            	reps.setChoixJuste(false);
            	listR.add(reps) ;
            }

            reps.setQuestion(quest);
            repRepository.save(reps);
        }
		questionRepository.save(quest);
		
		return "AjouterQuestion";
    } 
	
	
	//*********************************************************************************************
	
	@RequestMapping(value={"/AjouterMatiere"}, method = RequestMethod.GET)
	public String AjouterMatiere(ModelMap model){
        model.addAttribute("matt",new Matiere()) ;
        
        
        model.addAttribute("niv",nivRepository.findAll()) ;

		return "AjouterMatiere";
	}
	
	
	@PostMapping("/AjouterMatiere")
    public String AjouterMatiereSubm(@Valid Matiere mat, BindingResult bindingResult, Model model) {
        model.addAttribute("matt",new Matiere()) ;
        
       // System.out.println(mat.getNiveau().getId()+"  "+mat.getTitre());
        
		matiereRepository.save(mat);

		return "AjouterMatiere";
    }
	
	
	//**********************************************************************************************
	
	@RequestMapping(value={"/AfficherCours"}, method = RequestMethod.GET)
	public String AfficherCours(ModelMap model){
		
       // model.addAttribute("cours",new Cours()) ;
		List<Cours> courses = (List<Cours>) coursRepository.findCours();
		
        model.addAttribute("courss",courses) ;

		List<Test> test = (List<Test>) testRepository.findAll();
        model.addAttribute("tests",test) ;
        
		List<Matiere> mat = (List<Matiere>) matiereRepository.findAll();
        model.addAttribute("matieres",mat) ;


		return "affichage";
	}

	
}
